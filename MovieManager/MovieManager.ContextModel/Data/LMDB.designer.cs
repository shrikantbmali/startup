using System;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using MovieManager.ContextModel.Properties;

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MovieManager.ContextModel.Data
{
    [Database(Name="LMDB_1")]
	public partial class LMDBDataContext : DataContext
	{
		
		private static MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTbl_MediaLocation(Tbl_MediaLocation instance);
    partial void UpdateTbl_MediaLocation(Tbl_MediaLocation instance);
    partial void DeleteTbl_MediaLocation(Tbl_MediaLocation instance);
    partial void InsertTbl_MediaItem(Tbl_MediaItem instance);
    partial void UpdateTbl_MediaItem(Tbl_MediaItem instance);
    partial void DeleteTbl_MediaItem(Tbl_MediaItem instance);
    partial void InsertTbl_ApplicationSetting(Tbl_ApplicationSetting instance);
    partial void UpdateTbl_ApplicationSetting(Tbl_ApplicationSetting instance);
    partial void DeleteTbl_ApplicationSetting(Tbl_ApplicationSetting instance);
    #endregion
		
		public LMDBDataContext() : 
				base(Settings.Default.LMDB_1ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LMDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LMDBDataContext(IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LMDBDataContext(string connection, MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LMDBDataContext(IDbConnection connection, MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Table<Tbl_MediaLocation> Tbl_MediaLocations
		{
			get
			{
				return this.GetTable<Tbl_MediaLocation>();
			}
		}
		
		public Table<Tbl_MediaItem> Tbl_MediaItems
		{
			get
			{
				return this.GetTable<Tbl_MediaItem>();
			}
		}
		
		public Table<Tbl_ApplicationSetting> Tbl_ApplicationSettings
		{
			get
			{
				return this.GetTable<Tbl_ApplicationSetting>();
			}
		}
	}
	
	[Table(Name="dbo.Tbl_MediaLocations")]
	public partial class Tbl_MediaLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Path;
		
		private bool _IsToMonitor;
		
		private EntitySet<Tbl_MediaItem> _Tbl_MediaItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnIsToMonitorChanging(bool value);
    partial void OnIsToMonitorChanged();
    #endregion
		
		public Tbl_MediaLocation()
		{
			this._Tbl_MediaItems = new EntitySet<Tbl_MediaItem>(new Action<Tbl_MediaItem>(this.attach_Tbl_MediaItems), new Action<Tbl_MediaItem>(this.detach_Tbl_MediaItems));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Path", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[Column(Storage="_IsToMonitor", DbType="Bit NOT NULL")]
		public bool IsToMonitor
		{
			get
			{
				return this._IsToMonitor;
			}
			set
			{
				if ((this._IsToMonitor != value))
				{
					this.OnIsToMonitorChanging(value);
					this.SendPropertyChanging();
					this._IsToMonitor = value;
					this.SendPropertyChanged("IsToMonitor");
					this.OnIsToMonitorChanged();
				}
			}
		}
		
		[Association(Name="Tbl_MediaLocation_Tbl_MediaItem", Storage="_Tbl_MediaItems", ThisKey="Id", OtherKey="MediaLocationId")]
		public EntitySet<Tbl_MediaItem> Tbl_MediaItems
		{
			get
			{
				return this._Tbl_MediaItems;
			}
			set
			{
				this._Tbl_MediaItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tbl_MediaItems(Tbl_MediaItem entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_MediaLocation = this;
		}
		
		private void detach_Tbl_MediaItems(Tbl_MediaItem entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_MediaLocation = null;
		}
	}
	
	[Table(Name="dbo.Tbl_MediaItems")]
	public partial class Tbl_MediaItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _MediaLocationId;
		
		private string _Name;
		
		private string _Path;
		
		private EntityRef<Tbl_MediaLocation> _Tbl_MediaLocation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnMediaLocationIdChanging(long value);
    partial void OnMediaLocationIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    #endregion
		
		public Tbl_MediaItem()
		{
			this._Tbl_MediaLocation = default(EntityRef<Tbl_MediaLocation>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_MediaLocationId", DbType="BigInt NOT NULL")]
		public long MediaLocationId
		{
			get
			{
				return this._MediaLocationId;
			}
			set
			{
				if ((this._MediaLocationId != value))
				{
					if (this._Tbl_MediaLocation.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMediaLocationIdChanging(value);
					this.SendPropertyChanging();
					this._MediaLocationId = value;
					this.SendPropertyChanged("MediaLocationId");
					this.OnMediaLocationIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Path", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[Association(Name="Tbl_MediaLocation_Tbl_MediaItem", Storage="_Tbl_MediaLocation", ThisKey="MediaLocationId", OtherKey="Id", IsForeignKey=true)]
		public Tbl_MediaLocation Tbl_MediaLocation
		{
			get
			{
				return this._Tbl_MediaLocation.Entity;
			}
			set
			{
				Tbl_MediaLocation previousValue = this._Tbl_MediaLocation.Entity;
				if (((previousValue != value) 
							|| (this._Tbl_MediaLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tbl_MediaLocation.Entity = null;
						previousValue.Tbl_MediaItems.Remove(this);
					}
					this._Tbl_MediaLocation.Entity = value;
					if ((value != null))
					{
						value.Tbl_MediaItems.Add(this);
						this._MediaLocationId = value.Id;
					}
					else
					{
						this._MediaLocationId = default(long);
					}
					this.SendPropertyChanged("Tbl_MediaLocation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Tbl_ApplicationSettings")]
	public partial class Tbl_ApplicationSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private bool _IsMediaLocationSetup;
		
		private Nullable<bool> _IsDefaultSettings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnIsMediaLocationSetupChanging(bool value);
    partial void OnIsMediaLocationSetupChanged();
    partial void OnIsDefaultSettingsChanging(Nullable<bool> value);
    partial void OnIsDefaultSettingsChanged();
    #endregion
		
		public Tbl_ApplicationSetting()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IsMediaLocationSetup", DbType="Bit NOT NULL")]
		public bool IsMediaLocationSetup
		{
			get
			{
				return this._IsMediaLocationSetup;
			}
			set
			{
				if ((this._IsMediaLocationSetup != value))
				{
					this.OnIsMediaLocationSetupChanging(value);
					this.SendPropertyChanging();
					this._IsMediaLocationSetup = value;
					this.SendPropertyChanged("IsMediaLocationSetup");
					this.OnIsMediaLocationSetupChanged();
				}
			}
		}
		
		[Column(Storage="_IsDefaultSettings", DbType="Bit")]
		public Nullable<bool> IsDefaultSettings
		{
			get
			{
				return this._IsDefaultSettings;
			}
			set
			{
				if ((this._IsDefaultSettings != value))
				{
					this.OnIsDefaultSettingsChanging(value);
					this.SendPropertyChanging();
					this._IsDefaultSettings = value;
					this.SendPropertyChanged("IsDefaultSettings");
					this.OnIsDefaultSettingsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
